
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\jasmi\Downloads\VISKOM VSCODE\UAS\main\assets\frame9")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1440x1024")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 1024,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    720.0,
    500.0,
    image=image_image_1
)

canvas.create_rectangle(
    0.0,
    749.0,
    1459.0,
    1024.0,
    fill="#000000",
    outline="")


bayar = canvas.create_rectangle(
    670.0,
    711.0,
    770.0,
    811.0,
    fill="#000000",
    outline="")

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    719.0,
    757.0,
    image=image_image_2
)

canvas.tag_bind(bayar, "<Button-1>", lambda event: handle_bayar_click())

def handle_bayar_click():
    window.quit()
    window.destroy()
    subprocess.run(["python", "C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\facepayment.py"])

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    309.0,
    794.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    1336.0,
    795.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    105.0,
    794.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    202.0,
    794.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    501.0,
    795.0,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    406.0,
    794.0,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    598.0,
    795.0,
    image=image_image_9
)

homepage = canvas.create_rectangle(
    1305.0,
    56.0,
    1368.0,
    112.0,
    fill="#000000",
    outline="")

canvas.tag_bind(homepage, "<Button-1>", lambda event: handle_homepage_click())

def handle_homepage_click():
    window.quit()
    window.destroy()
    subprocess.run(["python", "C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\7_HomePage.py"]) 

def on_enter_homepage(event):
    canvas.itemconfig(homepage, fill="#0D350A")

def on_leave_homepage(event):
  canvas.itemconfig(homepage, fill="#000000")
  
canvas.tag_bind(homepage, "<Enter>", on_enter_homepage)
canvas.tag_bind(homepage, "<Leave>", on_leave_homepage)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    720.0,
    410.0,
    image=image_image_11
)

canvas.create_text(
    297.0,
    221.0,
    anchor="nw",
    text="Beng-beng",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

canvas.create_text(
    297.0,
    446.0,
    anchor="nw",
    text="Cimory",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

canvas.create_text(
    1048.0,
    360.0,
    anchor="nw",
    text="   Total",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    1098.0,
    425.0,
    image=image_image_12
)

total_text = canvas.create_text(
    1065.0,
    412.0,
    anchor="nw",
    text="",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

def calculate_total():
    try:
        # Get the values from the Entry widgets
        value1 = int(entry_1.get())
        value2 = int(entry_2.get())
        value3 = int(entry_3.get())
        value4 = int(entry_4.get())

        # Perform the calculations
        result = value1 * 3000 + value2 * 2000 + value3 * 8000 + value4 * 7000

        # Update the canvas text widget with the result
        canvas.itemconfig(total_text, text=str(result))
        
        with open("C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\total.txt", "w") as total_file:
            total_file.write(str(result))
            
    except ValueError:
        print("Invalid input. Please enter valid numeric values in all fields.")
        
total = float(total_text)

        

canvas.create_text(
    297.0,
    602.0,
    anchor="nw",
    text="Nescafe",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

canvas.create_text(
    297.0,
    320.0,
    anchor="nw",
    text="  Oreo",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

canvas.create_text(
    71.0,
    133.0,
    anchor="nw",
    text="List Cart",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

canvas.create_rectangle(
    69.5,
    164.3106689453125,
    221.99578261418173,
    167.9347099161007,
    fill="#FFFFFF",
    outline="")

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    189.0,
    236.0,
    image=image_image_13
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    192.0,
    335.0,
    image=image_image_14
)


image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    190.0,
    450.0,
    image=image_image_21
)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    190.0,
    600.0,
    image=image_image_22
)

canvas.create_rectangle(
    0.0,
    50.0,
    100.0,
    100.0,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    75.0,
    50.0,
    125.0,
    100.0,
    fill="#000000",
    outline="")

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    57.0,
    76.0,
    image=image_image_15
)

canvas.create_rectangle(
    494.5,
    193.5,
    497.00000011383327,
    692.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    768.5,
    193.5,
    771.0000001138333,
    692.0,
    fill="#FFFFFF",
    outline="")

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    633.0,
    236.0,
    image=image_image_16
)

entry_1 = Entry(
    bd=0,
    bg="#406940",
    fg="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 24 * -1),
    highlightthickness=0,
)
entry_1.place(
    x=623.0,
    y=226.0,
    width=20.0,
    height=18.0
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    633.0,
    336.0,
    image=image_image_17
)

entry_2 = Entry(
    bd=0,
    bg="#3F4D3F",
    fg="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 24 * -1),
    highlightthickness=0
)
entry_2.place(
    x=623.0,
    y=326.0,
    width=20.0,
    height=18.0
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    633.0,
    462.0,
    image=image_image_18
)

entry_3 = Entry(
    bd=0,
    bg= "#417940",
    fg="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 24 * -1),
    highlightthickness=0,
    disabledbackground="#FFFFFF"
)
entry_3.place(
    x=623.0,
    y=452.0,
    width=20.0,
    height=18.0
)

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    633.0,
    623.0,
    image=image_image_19
)

entry_4 = Entry(
    bd=0,
    bg="#3F3F3F",
    fg="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 24 * -1),
    highlightthickness=0
)
entry_4.place(
    x=623.0,
    y=613.0,
    width=20.0,
    height=18.0
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    1337.0,
    84.0,
    image=image_image_20
)
            
def load_data():
    try:
        with open("C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\belanja.txt", "r") as file:
            lines = file.readlines()

            if lines:
                # Assuming the last line contains the data you want to display
                last_line = lines[-1].strip()

                if last_line:
                    data = last_line.split(",")

                    # Check the length of the data list before accessing its elements
                    if len(data) == 4:
                        try:
                            # Attempt to convert numeric values to integers before inserting
                            entry_1.delete(0, 'end')
                            entry_1.insert(0, str(int(data[0])))

                            entry_2.delete(0, 'end')
                            entry_2.insert(0, str(int(data[1])))

                            entry_3.delete(0, 'end')
                            entry_3.insert(0, str(int(data[2])))

                            entry_4.delete(0, 'end')
                            entry_4.insert(0, str(int(data[3])))
                        except ValueError:
                            print("Invalid numeric data format in belanja.txt.")
                    else:
                        print(f"Invalid data format in belanja.txt: {last_line}")
                else:
                    print("Last line is empty.")
            else:
                print("File is empty.")
    except FileNotFoundError:
        print("File not found.")
        
    calculate_total()
    
entry_1.bind("<FocusOut>", lambda event: calculate_total())
entry_2.bind("<FocusOut>", lambda event: calculate_total())
entry_3.bind("<FocusOut>", lambda event: calculate_total())
entry_4.bind("<FocusOut>", lambda event: calculate_total())

# Call the function to load data when the program starts
load_data()


window.resizable(False, False)
window.mainloop()
