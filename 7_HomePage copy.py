
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import *
import subprocess
import sys
import json

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\jasmi\Downloads\VISKOM VSCODE\UAS\main\assets\frame5")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def read_user_data():
    global user_data
    try:
        with open("userdata.json", "r") as user_file:
            user_data = json.load(user_file)
            if user_data:
                print(f"Yang sedang login adalah {user_data[0]},{user_data[1]},{user_data[2]}.")
            else:
                print("Data pengguna kosong.")
    except FileNotFoundError:
        print("File userdata.json tidak ditemukan.")
        
read_user_data()

window = Tk()

window.geometry("1440x1024")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 1024,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    74.0,
    134.0,
    1370.0,
    390.0,
    fill="#024904",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    720.0,
    500.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    721.0,
    198.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    126.0,
    183.0,
    image=image_image_3
)
        
logged_in_user = canvas.create_text(
    72.0,
    44.0,
    anchor="nw",
    text="Hi ",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 30 * -1)
)

canvas.itemconfig(logged_in_user, text="Hi " + str(user_data[0]))
        
canvas.create_text(
    141.0,
    168.0,
    anchor="nw",
    text="Total Balance",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 22 * -1)
)

curret_amount = canvas.create_text(
        111.0,
        192.0,
        text=" ",
        anchor="nw",
        fill="#FFFFFF",
        font=("OpenSansHebrewCondensed Bold", 30 * -1)
    )

entry = Entry(
    bd=0,
    bg="#1C2A1C",
    fg="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 30 * -1),
    highlightthickness=0,
)
entry.place(
    x=111.0,
    y=195.0,
    width=200,
    height=50
)
              
def load_data():
    try:
        with open("C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\total.txt", "r") as file:
            lines = file.readlines()
            
            if lines:
                # Assuming the last line contains the data you want to subtract
                last_line = lines[-1].strip()

                if last_line:
                    try:
                        subtracted_value = 100000 - int(last_line)
                        print(f"Result of 100000 - {last_line}: {subtracted_value}")
                        canvas.itemconfig(curret_amount, text= "Rp " + str(subtracted_value))
                        
                        entry.delete(0, 'end')
                        entry.insert(0, str(subtracted_value))
                    except ValueError:
                        print("Invalid numeric data format in total.txt.")
                else:
                    print("Last line is empty.")
            else:
                print("File is empty.")
    except FileNotFoundError:
        print("File not found.")
        

entry = Entry(
    bd=0,
    bg="#1C2A1C",
    fg="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 30 * -1),
    highlightthickness=0,
)
entry.place(
    x=111.0,
    y=195.0,
    width=200,
    height=50
)

#bikin def calculate amount
    
canvas.create_text(
    72.0,
    84.0,
    anchor="nw",
    text="3rd January, 2024 ",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Regular", 15 * -1)
)

back = canvas.create_rectangle(
    1305.0,
    56.0,
    1368.0,
    112.0,
    fill="#000000",
    outline="")


image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    1337.0,
    84.0,
    image=image_image_5
)

canvas.create_rectangle(
    0.0,
    770.0,
    1459.0,
    1024.0,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    670.0,
    735.0,
    770.0,
    849.0,
    fill="#000000",
    outline="")

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    722.0,
    778.0,
    image=image_image_6
)

canvas.create_rectangle(
    74.0,
    341.0,
    674.0,
    491.0,
    fill="#740000",
    outline="")

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    374.0,
    416.0,
    image=image_image_7
)

canvas.create_rectangle(
    772.0,
    341.0,
    1372.0,
    491.0,
    fill="#832B00",
    outline="")

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    1074.0,
    418.0,
    image=image_image_8
)

canvas.create_rectangle(
    76.0,
    541.0,
    676.0,
    691.0,
    fill="#00316A",
    outline="")

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    374.0,
    616.0,
    image=image_image_9
)

canvas.create_rectangle(
    774.0,
    541.0,
    1374.0,
    691.0,
    fill="#313131",
    outline="")

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    1074.0,
    616.0,
    image=image_image_10
)

canvas.create_text(
    77.0,
    297.0,
    anchor="nw",
    text="Menu",
    fill="#FFFFFF",
    font=("OpenSansHebrewCondensed Bold", 30 * -1)
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    562.0,
    615.0,
    image=image_image_11
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    562.0,
    416.0,
    image=image_image_12
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    1336.0,
    616.0,
    image=image_image_13
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    1325.0,
    415.0,
    image=image_image_14
)

canvas.create_text(
    101.0,
    371.0,
    anchor="nw",
    text="Beng-beng",
    fill="#000000",
    font=("OpenSansHebrewCondensed Bold", 36 * -1)
)

canvas.create_text(
    101.0,
    421.0,
    anchor="nw",
    text="Rp3000",
    fill="#000000",
    font=("OpenSansHebrewCondensed Regular", 24 * -1)
)

canvas.create_text(
    101.0,
    576.0,
    anchor="nw",
    text="Oreo",
    fill="#000000",
    font=("OpenSansHebrewCondensed Bold", 36 * -1)
)

canvas.create_text(
    101.0,
    626.0,
    anchor="nw",
    text="Rp2000",
    fill="#000000",
    font=("OpenSansHebrewCondensed Regular", 24 * -1)
)

canvas.create_text(
    802.0,
    376.0,
    anchor="nw",
    text="Cimory",
    fill="#000000",
    font=("OpenSansHebrewCondensed Bold", 36 * -1)
)

canvas.create_text(
    802.0,
    426.0,
    anchor="nw",
    text="Rp8000",
    fill="#000000",
    font=("OpenSansHebrewCondensed Regular", 24 * -1)
)

canvas.create_text(
    802.0,
    580.0,
    anchor="nw",
    text="Nescafe",
    fill="#000000",
    font=("OpenSansHebrewCondensed Bold", 36 * -1)
)

canvas.create_text(
    802.0,
    630.0,
    anchor="nw",
    text="Rp7000",
    fill="#000000",
    font=("OpenSansHebrewCondensed Regular", 24 * -1)
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    309.0,
    800,
    image=image_image_15
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    1336.0,
    800.0,
    image=image_image_16
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    105.0,
    800.0,
    image=image_image_17
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    202.0,
    800.0,
    image=image_image_18
)

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    501.0,
    800.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    406.0,
    800.0,
    image=image_image_20
)

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    598.0,
    800.0,
    image=image_image_21
)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    406.0,
    416.0,
    image=image_image_22
)

canvas.create_rectangle(
    418.0,
    406.0,
    438.0,
    426.0,
    fill="#FFFFFF",
    outline="")

image_image_23 = PhotoImage(
    file=relative_to_assets("image_23.png"))
image_23 = canvas.create_image(
    428.0,
    416.0,
    image=image_image_23
)

entry_1 = Entry(
    bd=0,
    bg="#BE7B7B",
    fg="#000000",
    font=("OpenSansHebrewCondensed Bold", 17 * -1),
    highlightthickness=0
)
entry_1.place(
    x=418.0,
    y=406.0,
    width=20.0,
    height=18.0
)

image_image_24 = PhotoImage(
    file=relative_to_assets("image_24.png"))
image_24 = canvas.create_image(
    1255.0,
    416.0,
    image=image_image_24
)

canvas.create_rectangle(
    1267.0,
    406.0,
    1287.0,
    426.0,
    fill="#FFFFFF",
    outline="")

image_image_25 = PhotoImage(
    file=relative_to_assets("image_25.png"))
image_25 = canvas.create_image(
    1277.0,
    416.0,
    image=image_image_25
)

entry_2 = Entry(
    bd=0,
    bg="#A77962",
    fg="#000000",
    font=("OpenSansHebrewCondensed Bold", 17 * -1),
    highlightthickness=0
)
entry_2.place(
    x=1267.0,
    y=406.0,
    width=20.0,
    height=18.0
)

image_image_26 = PhotoImage(
    file=relative_to_assets("image_26.png"))
image_26 = canvas.create_image(
    1255.0,
    618.0,
    image=image_image_26
)

canvas.create_rectangle(
    1267.0,
    608.0,
    1287.0,
    628.0,
    fill="#FFFFFF",
    outline="")

image_image_27 = PhotoImage(
    file=relative_to_assets("image_27.png"))
image_27 = canvas.create_image(
    1277.0,
    618.0,
    image=image_image_27
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    1277.0,
    618.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#636363",
    fg="#000000",
    font=("OpenSansHebrewCondensed Bold", 17 * -1),
    highlightthickness=0
)
entry_3.place(
    x=1267.0,
    y=608.0,
    width=20.0,
    height=18.0
)

image_image_28 = PhotoImage(
    file=relative_to_assets("image_28.png"))
image_28 = canvas.create_image(
    408.0,
    616.0,
    image=image_image_28
)

canvas.create_rectangle(
    420.0,
    606.0,
    440.0,
    626.0,
    fill="#FFFFFF",
    outline="")

image_image_29 = PhotoImage(
    file=relative_to_assets("image_29.png"))
image_29 = canvas.create_image(
    430.0,
    616.0,
    image=image_image_29
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    430.0,
    616.0,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#49709D",
    fg="#000000",
    font=("OpenSansHebrewCondensed Bold", 17 * -1),
    highlightthickness=0
)
entry_4.place(
    x=420.0,
    y=606.0,
    width=20.0,
    height=18.0
)

canvas.tag_bind(image_5, "<Button-1>", lambda event: handle_image_click())
canvas.tag_bind(image_15, "<Button-1>", lambda event: handle_cart_click())
canvas.tag_bind(back, "<Button-1>", lambda event: handle_back_click())

def handle_image_click():
    window.quit()
    window.destroy()
    subprocess.run(["python", "C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\1_Login.py"]) 
    
def handle_cart_click():
    window.quit()
    window.destroy()
    subprocess.run(["python", "C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\cart.py"]) 
    
def handle_back_click():
    window.quit()
    window.destroy()
    subprocess.run(["python", "C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\1_Login.py"]) 
    
def on_enter_back(event):
    canvas.itemconfig(back, fill="#0D350A")

def on_leave_back(event):
  canvas.itemconfig(back, fill="#000000")
  
canvas.tag_bind(back, "<Enter>", on_enter_back)
canvas.tag_bind(back, "<Leave>", on_leave_back)

def handle_cart_click():
    # Read data from entries
    entry_1_value = entry_1.get()
    entry_2_value = entry_4.get()
    entry_3_value = entry_2.get()
    entry_4_value = entry_3.get()

    # Save data to belanja.txt
    if entry_1_value and entry_2_value and entry_3_value and entry_4_value:
        belanja(entry_1_value, entry_2_value, entry_3_value, entry_4_value)
        window.quit()
        window.destroy()
        subprocess.run(["python", "C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\cart.py"]) 
    else:
        print("Please fill in all the fields")

def belanja(entry_1_value, entry_2_value, entry_3_value, entry_4_value):
    with open("C:\\Users\\jasmi\\Downloads\\VISKOM VSCODE\\UAS\\main\\belanja.txt", "a") as file:
        file.write("\n" + entry_1_value + "," + entry_2_value + "," + entry_3_value + "," + entry_4_value)    

load_data()

window.resizable(False, False)
# root.mainloop()
window.mainloop()
